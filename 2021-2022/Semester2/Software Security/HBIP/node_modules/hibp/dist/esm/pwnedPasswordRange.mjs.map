{"version":3,"file":"pwnedPasswordRange.mjs","sources":["../../src/pwnedPasswordRange.ts"],"sourcesContent":["import { fetchFromApi } from './api/pwnedpasswords';\n\nexport interface PwnedPasswordSuffixes {\n  [suffix: string]: number;\n}\n\n/**\n * An object mapping an exposed password hash suffix (corresponding to a given\n * hash prefix) to how many times it occurred in the Pwned Passwords repository.\n *\n * @typedef {Object.<string, number>} PwnedPasswordSuffixes\n */\n\n/**\n * Fetches the SHA-1 hash suffixes for the given 5-character SHA-1 hash prefix.\n *\n * When a password hash with the same first 5 characters is found in the Pwned\n * Passwords repository, the API will respond with an HTTP 200 and include the\n * suffix of every hash beginning with the specified prefix, followed by a count\n * of how many times it appears in the data set. This function parses the\n * response and returns a more structured format.\n *\n * @param {string} prefix the first 5 characters of a SHA-1 password hash (case\n * insensitive)\n * @param {object} [options] a configuration object\n * @param {string} [options.baseUrl] a custom base URL for the\n * pwnedpasswords.com API endpoints (default: `https://api.pwnedpasswords.com`)\n * @param {string} [options.userAgent] a custom string to send as the User-Agent\n * field in the request headers (default: `hibp <version>`)\n * @returns {Promise<PwnedPasswordSuffixes>} a Promise which resolves to an\n * object mapping the `suffix` that when matched with the prefix composes the\n * complete hash, to the `count` of how many times it appears in the breached\n * password data set, or rejects with an Error\n *\n * @example\n * pwnedPasswordRange('5BAA6')\n *   .then(results => {\n *     // results will have the following shape:\n *     // {\n *     //   \"003D68EB55068C33ACE09247EE4C639306B\": 3,\n *     //   \"012C192B2F16F82EA0EB9EF18D9D539B0DD\": 1,\n *     //   ...\n *     // }\n *   })\n * @example\n * const suffix = '1E4C9B93F3F0682250B6CF8331B7EE68FD8';\n * pwnedPasswordRange('5BAA6')\n *   .then(results => (results[suffix] || 0))\n *   .catch(err => {\n *     // ...\n *   });\n * @see https://haveibeenpwned.com/api/v3#SearchingPwnedPasswordsByRange\n */\nexport function pwnedPasswordRange(\n  prefix: string,\n  options: { baseUrl?: string; userAgent?: string } = {},\n): Promise<PwnedPasswordSuffixes> {\n  return (\n    fetchFromApi(`/range/${encodeURIComponent(prefix)}`, options)\n      // create array from lines of text in response body\n      .then((data) => data.split('\\n'))\n      // convert into an object mapping suffix to count for each line\n      .then((results) =>\n        results.reduce<PwnedPasswordSuffixes>((acc, row) => {\n          const [suffix, countString] = row.split(':');\n          acc[suffix] = parseInt(countString, 10);\n          return acc;\n        }, {}),\n      )\n  );\n}\n"],"names":["pwnedPasswordRange","prefix","options","fetchFromApi","encodeURIComponent","then","data","split","results","reduce","acc","row","suffix","countString","parseInt"],"mappings":";AAMA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAwCgBA,mBACdC,QACAC,UAAoD;AAEpD,SACEC,YAAY,WAAWC,kBAAkB,CAACH,MAAD,GAA7B,EAAyCC,OAAzC,CAAZ;AAAA,GAEGG,IAFH,CAESC,IAAD,IAAUA,IAAI,CAACC,KAAL,CAAW,IAAX,CAFlB;AAAA,GAIGF,IAJH,CAISG,OAAD,IACJA,OAAO,CAACC,MAAR,CAAsC,CAACC,GAAD,EAAMC,GAAN;AACpC,UAAM,CAACC,MAAD,EAASC,WAAT,IAAwBF,GAAG,CAACJ,KAAJ,CAAU,GAAV,CAA9B;AACAG,IAAAA,GAAG,CAACE,MAAD,CAAH,GAAcE,QAAQ,CAACD,WAAD,EAAc,EAAd,CAAtB;AACA,WAAOH,GAAP;AACD,GAJD,EAIG,EAJH,CALJ,CADF;;;"}